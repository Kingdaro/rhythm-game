(function () {
'use strict';

function clear(ctx) {
  var _ctx$canvas = ctx.canvas;
  var width = _ctx$canvas.width;
  var height = _ctx$canvas.height;

  ctx.fillStyle = 'white';
  ctx.fillRect(0, 0, width, height);
}

function triangle(ctx, x, y, radius) {
  ctx.save();
  ctx.translate(x, y);
  ctx.beginPath();
  ctx.moveTo(0, -radius);
  ctx.lineTo(radius * Math.sqrt(2), radius);
  ctx.lineTo(-radius * Math.sqrt(2), radius);
  ctx.fill();
  ctx.restore();
}

var colors = ['rgb(231, 76, 60)', 'rgb(52, 152, 219)', 'rgb(46, 204, 113)', 'rgb(230, 126, 34)', 'rgb(155, 89, 182)', 'rgb(241, 196, 15)'];

function Background(width, height) {
  var shapes = [];
  var timer = 0;

  // private
  function addShape() {
    var x = Math.random() * width;
    var y = height + 100;
    var size = Math.random() * 2 + 2;
    var color = colors[Math.floor(Math.random() * colors.length)];
    shapes.push({ x: x, y: y, size: size, color: color });
  }

  function moveShape(shape, dx, dy) {
    shape.x += dx;
    shape.y += dy;
    return shape;
  }

  function moveShapes(elapsed) {
    var move = function move(shape) {
      return moveShape(shape, 0, -shape.size * 40 * elapsed);
    };
    return shapes.map(move);
  }

  function cullShapes() {
    return shapes.filter(function (shape) {
      return shape.y >= -100;
    });
  }

  function drawShape(ctx, _ref) {
    var x = _ref.x;
    var y = _ref.y;
    var color = _ref.color;
    var size = _ref.size;

    ctx.save();
    ctx.fillStyle = color;
    ctx.translate(x, y);
    ctx.scale(1, 1.1);
    ctx.translate(-x, -y);
    triangle(ctx, x, y, size * 20);
    ctx.restore();
  }

  // public
  function update(elapsed) {
    if (elapsed > 1) return; // no bullshit updates

    timer += elapsed;

    if (timer >= 0.15) {
      timer = 0;
      addShape();
    }

    shapes = moveShapes(elapsed);
    shapes = cullShapes();
  }

  function draw(ctx) {
    shapes.forEach(function (shape) {
      return drawShape(ctx, shape);
    });

    ctx.font = '14pt Roboto';
    ctx.fillStyle = 'black';
    ctx.fillText('Shapes: ' + shapes.length, 10, 30);
  }

  return { update: update, draw: draw };
}

var backgroundColor = 'rgba(0, 0, 0, 0.8)';
var borderColor = 'rgba(255, 255, 255, 0.8)';
var dividerColor = 'rgba(255, 255, 255, 0.1)';

var columnWidth = 48;
var columnCount = 6;
var position = 220;
var borderWidth = 4;
var dividerWidth = 1;

function Notefield(fieldHeight) {

  function update(elapsed) {}

  function drawShade(ctx) {
    ctx.fillRect(0, 0, columnWidth * columnCount, fieldHeight);
  }

  function drawEdge(ctx) {
    ctx.fillRect(0, 0, borderWidth, fieldHeight);
  }

  function drawColumnDivider(ctx) {
    ctx.fillRect(0, 0, dividerWidth, fieldHeight);
  }

  function draw(ctx) {
    var width = columnWidth * columnCount;

    ctx.save();

    ctx.fillStyle = backgroundColor;
    ctx.translate(position, 0);
    drawShade(ctx);

    ctx.fillStyle = borderColor;

    ctx.save();
    ctx.translate(-borderWidth / 2, 0);
    drawEdge(ctx);
    ctx.translate(width, 0);
    drawEdge(ctx);
    ctx.restore();

    ctx.fillStyle = dividerColor;
    for (var i = 1; i < columnCount; i++) {
      ctx.translate(columnWidth, 0);
      drawColumnDivider(ctx);
    }

    ctx.restore();
  }

  return { update: update, draw: draw };
}

function Scene(objects) {
  function update(elapsed) {
    objects.forEach(function (obj) {
      return obj.update(elapsed);
    });
  }

  function draw(ctx) {
    objects.forEach(function (obj) {
      return obj.draw(ctx);
    });
  }

  return { update: update, draw: draw };
}

function Timer() {
  var time = Date.now();
  var lastDeltas = [];

  function step() {
    var elapsed = (Date.now() - time) / 1000;
    time = Date.now();
    lastDeltas = lastDeltas.concat([time]).slice(-50);
    return elapsed;
  }

  function fps() {
    var avg = lastDeltas.reduce(function (a, b) {
      return a + b;
    }) / lastDeltas.length;
    return 60 / (avg / 1000);
  }

  return { step: step, fps: fps };
}

function Game(ctx) {
  var _ctx$canvas = ctx.canvas;
  var width = _ctx$canvas.width;
  var height = _ctx$canvas.height;


  var timer = Timer();

  var scene = Scene([Background(width, height), Notefield(height)]);

  function step() {
    var elapsed = timer.step();
    scene.update(elapsed);
    clear(ctx);
    scene.draw(ctx);
  }

  return { step: step };
}

var canvas = document.querySelector('#game');
var ctx = canvas.getContext('2d');
var game = Game(ctx);

window.requestAnimationFrame(function draw() {
  game.step();
  window.requestAnimationFrame(draw);
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
